
==================== FINAL INTERFACE ====================
2016-04-06 22:56:34.724419 UTC

interface main@main:Config 7103
  interface hash: 90bb89a5e2ac5c35787b1c5a569558b0
  ABI hash: 0848c00f51d410a584912edd6f883215
  export-list hash: e71a21ca3e7f3f5d5bdcd5a23746948e
  orphan hash: 7f76f2e23d713684150f20a410a322e3
  flag hash: 3b180ddd375b7a9066131d9716430888
  sig of: Nothing
  used TH splices: False
  where
exports:
  Config.dropConfigs
  Config.initConfig
  Config.readConfig
module dependencies: Events IO Text
package dependencies: ConfigFile-1.1.4@Confi_0LNAZ1C8dIm4I7qFuwxHXR
                      MissingH-1.3.0.1@Missi_Ib1zDeoXo62AcZUCIuxqeF
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      asn1-encoding-0.9.3@asn1e_A0jeMIoYyiZ4PSPkybrUpF
                      asn1-parse-0.9.4@asn1p_LrLFPvrxagO8jGmFd1SmqK
                      asn1-types-0.3.2@asn1t_BR43uodYA6j1oMVNuWbt5p
                      async-2.1.0@async_KuqnF1GrhHK5nNp6Zzm3jy base-4.8.2.0
                      base64-bytestring-1.0.0.1@base6_AkCk8zInckjJsyQ4AIFHPN
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      byteable-0.1.1@bytea_38yjJsjDRm9KusCn8Yo4aB
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      cereal-0.5.1.0@cerea_843xOxvPj94HAJ9SD4EJuq
                      connection-0.2.5@conne_CuwSS0Usisp8tvPFRsfl8I
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      cryptonite-0.10@crypt_9z0j8QI27Av2VIWw0mEkTO
                      data-default-class-0.0.1@datad_K91y8NcZUJI9yaBI61rgdD
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      directory-1.2.2.0@direc_0hFG6ZxK1nk4zsyOqbNHfm
                      filepath-1.4.0.0@filep_Ey7a1in9roBAE8bUFJ5R9m ghc-prim-0.4.0.0
                      hourglass-0.2.10@hourg_LCfvpegcEVDEeuH0foNCGl integer-gmp-1.0.0.0
                      memory-0.11@memor_0EiEBIg44i8KGjAeoKnPDs
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ
                      parsec-3.1.9@parse_7aUabKPjr5W6Al5Ge35AQl
                      pem-0.2.2@pem_68T9LQQkAB02O0OO4VHaxc
                      process-1.2.3.0@proce_52AgREEfSrnJLlkGV9YZZJ
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      regex-base-0.93.2@regex_47KXx9dLqeO8MNJeizLKhP
                      regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89
                      regex-pcre-0.94.4@regex_D90DoxwgsTHEvoLrkciZPU
                      regex-compat-0.95.1@regex_EyUO1k1s8YNJ81jSdgVW1z
                      simpleirc-0.3.1@simpl_8XLCtlyIFxlHjx0Q1X3hDR
                      socks-0.5.4@socks_BZJ6e1EePGtK56UKTxGOcA
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      tagsoup-0.13.9@tagso_3I5x83DoCVBIz4INMBLU3R
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      tls-1.3.4@tls_JvHmsuTo5yN8FKXS7TwXzo
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      unix-2.7.1.0@unix_KZL8h98IqDM57kQSPo1mKx
                      utf8-string-1.0.1.1@utf8s_L8eKHa7Iv9q7FVKUYW6u4b
                      x509-1.6.3@x509_EUmMVSl6w2w3X0XDEe6o9j
                      x509-store-1.6.1@x509s_DRxbulEQC602MUMwjQ8WGy
                      x509-system-1.6.3@x509s_F9nR2A13AOT6cAw1re7jUB
                      x509-validation-1.6.3@x509v_JPQPXw7FuFXLx3vcY0f8CP
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket
         network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket.Types
         regex-base-0.93.2@regex_47KXx9dLqeO8MNJeizLKhP:Text.Regex.Base.Context
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.ByteString
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.Sequence
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.String
         regex-pcre-0.94.4@regex_D90DoxwgsTHEvoLrkciZPU:Text.Regex.PCRE.ByteString
         regex-pcre-0.94.4@regex_D90DoxwgsTHEvoLrkciZPU:Text.Regex.PCRE.ByteString.Lazy
         regex-pcre-0.94.4@regex_D90DoxwgsTHEvoLrkciZPU:Text.Regex.PCRE.Sequence
         regex-pcre-0.94.4@regex_D90DoxwgsTHEvoLrkciZPU:Text.Regex.PCRE.String
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
import  -/  ConfigFile-1.1.4@Confi_0LNAZ1C8dIm4I7qFuwxHXR:Data.ConfigFile db58067824d23851f9978feb68f31153
import  -/  base-4.8.2.0:Control.Monad 480c5067477275068c9b98be08410df9
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.IO bb5b81adcea33b14bd4abe16d7dde45f
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0248c1e850b7ea124cf7a2e1669ebf67
import  -/  base-4.8.2.0:Text.Read ef0ef92fb7358ae94bab089940adfd2a
import  -/  directory-1.2.2.0@direc_0hFG6ZxK1nk4zsyOqbNHfm:System.Directory 5cce0d33f34c5d512c68e0bc0b4b8374
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  Events d2a9b8dad65c239f8a0cc74e7ebe5531
  exports: 798d8c85074e47ecb1e44e9334d45a5f
  events 56aef13bbc6757bad06000176a789490
import  -/  mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8:Control.Monad.Except a48c40e49a1635a6f6c139e86212e5c9
import  -/  simpleirc-0.3.1@simpl_8XLCtlyIFxlHjx0Q1X3hDR:Network.SimpleIRC 1e1ba7f38153741070330d813e6c11ad
import  -/  simpleirc-0.3.1@simpl_8XLCtlyIFxlHjx0Q1X3hDR:Network.SimpleIRC.Core d0486eaab900e767b022a4fdc0ccdfb5
import  -/  transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.IO.Class 37487179a2f5eb2ea7922b911abcae56
import  -/  transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Except 2f5d46e037f0502f77738cc68eb8b917
ca144ad91146540e20ba84e9428317b9
  $s$fApplicativeExceptT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Except.ExceptT
         (Data.ConfigFile.Types.CPErrorData, GHC.Base.String) GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Except.ExceptT
                       (Data.ConfigFile.Types.CPErrorData, GHC.Base.String) GHC.Types.IO)
                  Config.$s$fApplicativeExceptT1
                  (Control.Monad.Trans.Except.$fApplicativeExceptT_$cpure
                     @ (Data.ConfigFile.Types.CPErrorData, GHC.Base.String)
                     @ GHC.Types.IO
                     Config.$s$fApplicativeExceptT1
                     GHC.Base.$fFunctorIO
                     GHC.Base.$fMonadIO)
                  (Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ (Data.ConfigFile.Types.CPErrorData, GHC.Base.String)
                     @ GHC.Types.IO
                     Config.$s$fApplicativeExceptT1
                     GHC.Base.$fFunctorIO
                     GHC.Base.$fMonadIO)
                  (Control.Monad.Trans.Except.$fApplicativeExceptT_$c*>
                     @ (Data.ConfigFile.Types.CPErrorData, GHC.Base.String)
                     @ GHC.Types.IO
                     Config.$s$fApplicativeExceptT1
                     GHC.Base.$fFunctorIO
                     GHC.Base.$fMonadIO)
                  (Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*
                     @ (Data.ConfigFile.Types.CPErrorData, GHC.Base.String)
                     @ GHC.Types.IO
                     Config.$s$fApplicativeExceptT1
                     GHC.Base.$fFunctorIO
                     GHC.Base.$fMonadIO) -}
a0769891a9635d4dc4a7c18176a3f823
  $s$fApplicativeExceptT1 ::
    GHC.Base.Functor
      (Control.Monad.Trans.Except.ExceptT
         (Data.ConfigFile.Types.CPErrorData, GHC.Base.String) GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (Config.$s$fApplicativeExceptT_$s$fFunctorExceptT
                   @ (Data.ConfigFile.Types.CPErrorData, GHC.Base.String)) -}
14b540941f0d8dd91d69622ea1fa1072
  $s$fApplicativeExceptT_$s$fFunctorExceptT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
                  (Config.$s$fApplicativeExceptT_$s$fFunctorExceptT_$cfmap @ e)
                  (Control.Monad.Trans.Except.$fFunctorExceptT_$c<$
                     @ e
                     @ GHC.Types.IO
                     GHC.Base.$fFunctorIO) -}
a061ce464207705eb64f2a6e0d04e173
  $s$fApplicativeExceptT_$s$fFunctorExceptT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(S),1*C1(U(U,1*U))><L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ e
                   @ a13
                   @ b
                   f :: a13 -> b
                   eta :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a13
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (GHC.Base.$fFunctorIO_$cfmap
                    @ (Data.Either.Either e a13)
                    @ (Data.Either.Either e b)
                    (Data.Either.$fFunctorEither_$cfmap @ e @ a13 @ b f)
                    eta
                      `cast`
                    (Control.Monad.Trans.Except.NTCo:ExceptT[0]
                         <e>_N <GHC.Types.IO>_R <a13>_N))
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Data.Either.Either e b>_R)
                   eta1)
                  `cast`
                (forall e a13 b.
                 <a13 -> b>_R
                 ->_R <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a13>_R
                 ->_R Trans
                          (Sym (GHC.Types.NTCo:IO[0] <Data.Either.Either e b>_R))
                          (Sym (Control.Monad.Trans.Except.NTCo:ExceptT[0]
                                    <e>_N <GHC.Types.IO>_R <b>_N))) -}
1a6275e129eb22a84bf6d8d108d67f1a
  $s$fMonadErroreExceptT ::
    Control.Monad.Error.Class.MonadError
      (Data.ConfigFile.Types.CPErrorData, GHC.Base.String)
      (Control.Monad.Trans.Except.ExceptT
         (Data.ConfigFile.Types.CPErrorData, GHC.Base.String) GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.ConfigFile.Types.CPErrorData, GHC.Base.String)
                  @ (Control.Monad.Trans.Except.ExceptT
                       (Data.ConfigFile.Types.CPErrorData, GHC.Base.String) GHC.Types.IO)
                  Config.$s$fMonadErroreExceptT1
                  (Control.Monad.Error.Class.$fMonadErroreExceptT_$cthrowError
                     @ (Data.ConfigFile.Types.CPErrorData, GHC.Base.String)
                     @ GHC.Types.IO
                     Config.$s$fMonadErroreExceptT1
                     GHC.Base.$fMonadIO)
                  (Control.Monad.Error.Class.$fMonadErroreExceptT_$ccatchError
                     @ (Data.ConfigFile.Types.CPErrorData, GHC.Base.String)
                     @ GHC.Types.IO
                     Config.$s$fMonadErroreExceptT1
                     GHC.Base.$fMonadIO) -}
b48e8abc105cbb3caddf59c43b48151c
  $s$fMonadErroreExceptT1 ::
    GHC.Base.Monad
      (Control.Monad.Trans.Except.ExceptT
         (Data.ConfigFile.Types.CPErrorData, GHC.Base.String) GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Config.$s$fMonadErroreExceptT_$s$fMonadExceptT -}
dc49f11fbfe86c101d6a1d1963e3f3a0
  $s$fMonadErroreExceptT2 ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Except.ExceptT
         (Data.ConfigFile.Types.CPErrorData, GHC.Base.String) GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Config.$s$fApplicativeExceptT -}
e97c3b77a093725e0eb5455cd0259725
  $s$fMonadErroreExceptT_$s$fMonadExceptT ::
    GHC.Base.Monad
      (Control.Monad.Trans.Except.ExceptT
         (Data.ConfigFile.Types.CPErrorData, GHC.Base.String) GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Except.ExceptT
                       (Data.ConfigFile.Types.CPErrorData, GHC.Base.String) GHC.Types.IO)
                  Config.$s$fMonadErroreExceptT2
                  (Control.Monad.Trans.Except.$fMonadExceptT_$c>>=
                     @ (Data.ConfigFile.Types.CPErrorData, GHC.Base.String)
                     @ GHC.Types.IO
                     Config.$s$fMonadErroreExceptT2
                     GHC.Base.$fMonadIO)
                  Config.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>
                  (Control.Monad.Trans.Except.$fMonadExceptT_$creturn
                     @ (Data.ConfigFile.Types.CPErrorData, GHC.Base.String)
                     @ GHC.Types.IO
                     Config.$s$fMonadErroreExceptT2
                     GHC.Base.$fMonadIO)
                  (Control.Monad.Trans.Except.$fMonadExceptT_$cfail
                     @ (Data.ConfigFile.Types.CPErrorData, GHC.Base.String)
                     @ GHC.Types.IO
                     Config.$s$fMonadErroreExceptT2
                     GHC.Base.$fMonadIO) -}
889df1ca90740a978a223e39b124d5e3
  $s$fMonadErroreExceptT_$s$fMonadExceptT_$c>> ::
    Control.Monad.Trans.Except.ExceptT
      (Data.ConfigFile.Types.CPErrorData, GHC.Base.String) GHC.Types.IO a
    -> Control.Monad.Trans.Except.ExceptT
         (Data.ConfigFile.Types.CPErrorData, GHC.Base.String) GHC.Types.IO b
    -> Control.Monad.Trans.Except.ExceptT
         (Data.ConfigFile.Types.CPErrorData, GHC.Base.String) GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(LS)),1*C1(U(U,1*U))><L,1*C1(U(U,U))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a13
                   @ b
                   m1 :: Control.Monad.Trans.Except.ExceptT
                           (Data.ConfigFile.Types.CPErrorData, GHC.Base.String)
                           GHC.Types.IO
                           a13
                   k :: Control.Monad.Trans.Except.ExceptT
                          (Data.ConfigFile.Types.CPErrorData, GHC.Base.String)
                          GHC.Types.IO
                          b ->
                 Control.Monad.Trans.Except.$fMonadExceptT_$c>>=
                   @ (Data.ConfigFile.Types.CPErrorData, GHC.Base.String)
                   @ GHC.Types.IO
                   Config.$s$fMonadErroreExceptT2
                   GHC.Base.$fMonadIO
                   @ a13
                   @ b
                   m1
                   (\ ds :: a13 -> k)) -}
f1e43404e154697d2a3ce9c66c23ecf8
  dropConfigs :: [GHC.IO.FilePath] -> [GHC.IO.FilePath]
  {- Arity: 1, Strictness: <S,1*U> -}
444228971054050d1f42289a5681221d
  initConfig :: GHC.Types.IO (GHC.IO.FilePath, [GHC.IO.FilePath])
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Config.initConfig1
                  `cast`
                (Sym (GHC.Types.NTCo:IO[0]
                          <(GHC.IO.FilePath, [GHC.IO.FilePath])>_R)) -}
9a52c156c5ffb05193c5ea6cf7740fa9
  initConfig1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.IO.FilePath, [GHC.IO.FilePath]) #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.catch#
                        @ GHC.Types.Bool
                        @ GHC.Exception.SomeException
                        Config.initConfig14
                        System.Directory.doesDirectoryExist2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Types.False
                   -> case System.Posix.Directory.createDirectory1
                             Config.initConfig_configdir
                             System.Directory.createDirectory2
                               `cast`
                             (Sym (System.Posix.Types.NTCo:CMode[0]))
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case System.Directory.doesFileExist1
                             Config.initConfig12
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      Config.initConfig2 ipv5 ipv4 } }
                   GHC.Types.True
                   -> case System.Directory.doesFileExist1
                             Config.initConfig12
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      Config.initConfig2 ipv3 ipv2 } } }) -}
83b44bdfce3cfe5af2a62df9380aea90
  initConfig10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "network: irc.network.net"#) -}
cfd71773555ec4c36f9869d98dd23804
  initConfig11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.IO.Handle.Types.Handle #)
  {- Arity: 1,
     Unfolding: (GHC.IO.Handle.FD.openFile1
                   Config.initConfig12
                   GHC.IO.IOMode.WriteMode) -}
e07652100e66fbff2daeca61063ed8eb
  initConfig12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Config.initConfig_configdir
                   Config.initConfig13) -}
93743caa19beb264d29a421ed4f7933c
  initConfig13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/default.irc"#) -}
e5f42fb3f451445497dbf670e00ac919
  initConfig14 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 1,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case System.Posix.Files.getFileStatus1
                        Config.initConfig_configdir
                        s of ds2 { (#,#) ipv ipv1 ->
                 (# ipv, System.Posix.Files.Common.isDirectory ipv1 #) }) -}
59eda39dae10cb76c1053394660ba9c4
  initConfig2 ::
    GHC.Types.Bool
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.IO.FilePath, [GHC.IO.FilePath]) #)
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ fileexists :: GHC.Types.Bool
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case fileexists of wild {
                   GHC.Types.False
                   -> case Control.Exception.Base.bracket1
                             @ GHC.IO.Handle.Types.Handle
                             @ ()
                             @ ()
                             Config.initConfig11
                               `cast`
                             (Sym (GHC.Types.NTCo:IO[0] <GHC.IO.Handle.Types.Handle>_R))
                             GHC.IO.Handle.hClose1
                               `cast`
                             (<GHC.IO.Handle.Types.Handle>_R
                              ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                             Config.initConfig3
                               `cast`
                             (<GHC.IO.Handle.Types.Handle>_R
                              ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                             s of ds1 { (#,#) ipv ipv1 ->
                      case System.Directory.getDirectoryContents1
                             Config.initConfig_configdir
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      (# ipv2, (Config.initConfig_configdir, ipv3) #) } }
                   GHC.Types.True
                   -> case System.Directory.getDirectoryContents1
                             Config.initConfig_configdir
                             s of ds1 { (#,#) ipv ipv1 ->
                      (# ipv, (Config.initConfig_configdir, ipv1) #) } }) -}
9e39e8087e4fb50c264c4096f05d15bf
  initConfig3 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Unfolding: (\ hdl :: GHC.IO.Handle.Types.Handle[OneShot]
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   hdl
                   Config.initConfig4
                   GHC.Types.False
                   eta) -}
c8eb219c96ae20c77d4c73e7bdd230cb
  initConfig4 :: GHC.Base.String
  {- Unfolding: (Data.OldList.unlines Config.initConfig5) -}
73e1480eebc7974b7fbba201f91c15e1
  initConfig5 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Config.initConfig10
                   Config.initConfig6) -}
79de204771785bd3bebd0ade94c79a79
  initConfig6 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Config.initConfig9
                   Config.initConfig7) -}
be190986519ffa0e7e648f448fc34c75
  initConfig7 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Config.initConfig8
                   (GHC.Types.[] @ GHC.Base.String)) -}
95e327038022822310220ba7d13e0e88
  initConfig8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "channels = [\"#chan\"]"#) -}
6fc7be7f8db30ad757423d3f6a3ba33c
  initConfig9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "name: botName"#) -}
bc45c4dfaea9884661a883d499423837
  initConfig_configdir :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/app/mssbot"#) -}
14753825613bf3add2ae09d98fa4ece3
  readConfig ::
    GHC.IO.FilePath -> GHC.Types.IO Network.SimpleIRC.Core.IrcConfig
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Config.readConfig1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <Network.SimpleIRC.Core.IrcConfig>_R)) -}
e46e04927734082719a2cf9ba464d570
  readConfig1 ::
    GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Network.SimpleIRC.Core.IrcConfig #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ file :: GHC.IO.FilePath
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Data.ConfigFile.Parser.parse_file1
                        @ (Control.Monad.Trans.Except.ExceptT
                             Data.ConfigFile.Types.CPError GHC.Types.IO)
                        Config.$s$fMonadErroreExceptT
                        file
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Except.NTCo:ExceptT[0]
                                <(Data.ConfigFile.Types.CPErrorData, GHC.Base.String)>_N
                                <GHC.Types.IO>_R
                                <Data.ConfigFile.Types.ParseOutput>_N)
                           (GHC.Types.NTCo:IO[0]
                                <Data.Either.Either
                                   (Data.ConfigFile.Types.CPErrorData, GHC.Base.String)
                                   Data.ConfigFile.Types.ParseOutput>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild {
                   Data.Either.Left e1
                   -> Config.readConfig4
                        ipv2
                        (Data.Either.Left
                           @ (Data.ConfigFile.Types.CPErrorData, GHC.Base.String)
                           @ Data.ConfigFile.Types.ConfigParser
                           e1)
                   Data.Either.Right x
                   -> Config.readConfig4
                        ipv2
                        (Data.Either.Right
                           @ (Data.ConfigFile.Types.CPErrorData, GHC.Base.String)
                           @ Data.ConfigFile.Types.ConfigParser
                           (Data.ConfigFile.Types.ConfigParser
                              (Data.ConfigFile.$sunionWith_$sunionWithKey
                                 @ (Data.Map.Base.Map
                                      Data.ConfigFile.Types.OptionSpec GHC.Base.String)
                                 Data.ConfigFile.merge1
                                 (Data.ConfigFile.fromAL x)
                                 Config.readConfig2)
                              Data.ConfigFile.emptyCP3
                              Data.ConfigFile.emptyCP_$sdefdefaulthandler
                              GHC.Types.True
                              Data.ConfigFile.emptyCP1)) } } }) -}
943ffa45d61bb0e015b70b98250d755b
  readConfig10 :: Network.SimpleIRC.Core.IrcConfig
  {- Unfolding: (Network.SimpleIRC.Core.IrcConfig
                   Config.readConfig11
                   Network.SimpleIRC.Core.mkDefaultConfig7
                   GHC.Types.False
                   Config.readConfig11
                   (GHC.Base.Nothing @ GHC.Base.String)
                   Network.SimpleIRC.Core.mkDefaultConfig6
                   Network.SimpleIRC.Core.mkDefaultConfig5
                   (GHC.Types.[] @ GHC.Base.String)
                   (GHC.Types.[] @ Network.SimpleIRC.Core.IrcEvent)
                   Network.SimpleIRC.Core.mkDefaultConfig4
                   Network.SimpleIRC.Core.mkDefaultConfig2
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))
                   Network.SimpleIRC.Core.mkDefaultConfig1) -}
077c42e5861e3e5455733270604d4c57
  readConfig11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "dead"#) -}
badab5e35a758d417b932c266e44e694
  readConfig2 ::
    Data.Map.Base.Map
      Data.ConfigFile.Types.SectionSpec Data.ConfigFile.Types.CPOptions
  {- Unfolding: (Data.Map.Base.map
                   @ Data.ConfigFile.Types.CPOptions
                   @ Data.ConfigFile.Types.CPOptions
                   @ Data.ConfigFile.Types.SectionSpec
                   Config.readConfig3
                   Data.ConfigFile.emptyCP4) -}
91c736b30e7a2c0e01ff878827b184b3
  readConfig3 ::
    Data.ConfigFile.Types.CPOptions
    -> Data.Map.Base.Map GHC.Base.String [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (\ x :: Data.ConfigFile.Types.CPOptions ->
                 Data.ConfigFile.$sfromList
                   @ [GHC.Types.Char]
                   (Config.readConfig_go1
                      (GHC.Types.[]
                         @ (Data.ConfigFile.Types.OptionSpec, GHC.Base.String))
                      x)) -}
a53675b89bc2a36b77988414c43308cc
  readConfig4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> Data.Either.Either
         Data.ConfigFile.Types.CPError Data.ConfigFile.Types.ConfigParser
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Network.SimpleIRC.Core.IrcConfig #)
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ ipv :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot]
                   ipv1 :: Data.Either.Either
                             Data.ConfigFile.Types.CPError
                             Data.ConfigFile.Types.ConfigParser[OneShot] ->
                 case ipv1 of wild {
                   Data.Either.Left e1 -> (# ipv, Config.readConfig10 #)
                   Data.Either.Right x
                   -> case x of ww { Data.ConfigFile.Types.ConfigParser ww1 ww2 ww3 ww4 ww5 ->
                      case ww5 ww Config.readConfig9 Config.readConfig8 of wild1 {
                        Data.Either.Left x1 -> (# ipv, Config.readConfig10 #)
                        Data.Either.Right x1
                        -> case ww5 ww Config.readConfig9 Config.readConfig7 of wild2 {
                             Data.Either.Left x2 -> (# ipv, Config.readConfig10 #)
                             Data.Either.Right x2
                             -> case ww5 ww Config.readConfig9 Config.readConfig6 of wild3 {
                                  Data.Either.Left x3 -> (# ipv, Config.readConfig10 #)
                                  Data.Either.Right x3
                                  -> (# ipv,
                                        Network.SimpleIRC.Core.IrcConfig
                                          x1
                                          Network.SimpleIRC.Core.mkDefaultConfig7
                                          GHC.Types.False
                                          x2
                                          (GHC.Base.Nothing @ GHC.Base.String)
                                          x2
                                          x2
                                          (case Text.Read.readEither6
                                                  @ [GHC.Base.String]
                                                  (Text.ParserCombinators.ReadP.run
                                                     @ [GHC.Base.String]
                                                     Config.readConfig5
                                                     x3) of wild4 {
                                             []
                                             -> GHC.Err.error
                                                  @ [GHC.Base.String]
                                                  Text.Read.readEither4
                                             : x4 ds
                                             -> case ds of wild5 {
                                                  [] -> x4
                                                  : ipv2 ipv3
                                                  -> GHC.Err.error
                                                       @ [GHC.Base.String]
                                                       Text.Read.readEither2 } })
                                          Events.events
                                          Network.SimpleIRC.Core.mkDefaultConfig4
                                          Network.SimpleIRC.Core.mkDefaultConfig2
                                            `cast`
                                          (Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))
                                          Network.SimpleIRC.Core.mkDefaultConfig1 #) } } } } }) -}
9095a237588f4cee3bf4f1c67eb76dc9
  readConfig5 :: Text.ParserCombinators.ReadP.P [GHC.Base.String]
  {- Unfolding: (GHC.Read.$wa
                   @ [GHC.Types.Char]
                   GHC.Read.$fReadChar1
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <[GHC.Types.Char]>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <[GHC.Types.Char]>_R)))
                   @ [GHC.Base.String]
                   (Text.Read.readEither5 @ [GHC.Base.String])) -}
211d1f01bf9b093aad6d56f0c52e821d
  readConfig6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "channels"#) -}
feaf7b0578e8fbd081f230ff5e5e17e6
  readConfig7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "name"#) -}
6209e283d82a7401f8a2b4640cb33319
  readConfig8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "network"#) -}
af1da03b245ad51abd09beaa1d10ee95
  readConfig9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DEFAULT"#) -}
5da9a38ee223c748a06984392d91b5a0
  readConfig_go1 ::
    [(Data.ConfigFile.Types.OptionSpec, GHC.Base.String)]
    -> Data.Map.Base.Map [GHC.Types.Char] [GHC.Types.Char]
    -> [(Data.ConfigFile.Types.OptionSpec, GHC.Base.String)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
"SPEC/Config $fApplicativeExceptT @ (CPErrorData, String) @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                               (Control.Monad.Trans.Except.ExceptT
                                                                                                  (Data.ConfigFile.Types.CPErrorData,
                                                                                                   GHC.Base.String)
                                                                                                  GHC.Types.IO)
                                                                                $dFunctor1 :: GHC.Base.Functor
                                                                                                GHC.Types.IO
                                                                                $dMonad :: GHC.Base.Monad
                                                                                             GHC.Types.IO
  Control.Monad.Trans.Except.$fApplicativeExceptT @ (Data.ConfigFile.Types.CPErrorData,
                                                     GHC.Base.String)
                                                  @ GHC.Types.IO
                                                  $dFunctor
                                                  $dFunctor1
                                                  $dMonad
  = Config.$s$fApplicativeExceptT
"SPEC/Config $fFunctorExceptT _ @ IO" [ALWAYS] forall @ e
                                                      $dFunctor :: GHC.Base.Functor GHC.Types.IO
  Control.Monad.Trans.Except.$fFunctorExceptT @ e
                                              @ GHC.Types.IO
                                              $dFunctor
  = Config.$s$fApplicativeExceptT_$s$fFunctorExceptT @ e
"SPEC/Config $fFunctorExceptT_$cfmap _ @ IO" [ALWAYS] forall @ e
                                                             $dFunctor :: GHC.Base.Functor
                                                                            GHC.Types.IO
  Control.Monad.Trans.Except.$fFunctorExceptT_$cfmap @ e
                                                     @ GHC.Types.IO
                                                     $dFunctor
  = Config.$s$fApplicativeExceptT_$s$fFunctorExceptT_$cfmap @ e
"SPEC/Config $fMonadErroreExceptT @ (CPErrorData, String) @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                                             (Control.Monad.Trans.Except.ExceptT
                                                                                                (Data.ConfigFile.Types.CPErrorData,
                                                                                                 GHC.Base.String)
                                                                                                GHC.Types.IO)
                                                                                $dMonad1 :: GHC.Base.Monad
                                                                                              GHC.Types.IO
  Control.Monad.Error.Class.$fMonadErroreExceptT @ (Data.ConfigFile.Types.CPErrorData,
                                                    GHC.Base.String)
                                                 @ GHC.Types.IO
                                                 $dMonad
                                                 $dMonad1
  = Config.$s$fMonadErroreExceptT
"SPEC/Config $fMonadExceptT @ (CPErrorData, String) @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                             (Control.Monad.Trans.Except.ExceptT
                                                                                                (Data.ConfigFile.Types.CPErrorData,
                                                                                                 GHC.Base.String)
                                                                                                GHC.Types.IO)
                                                                          $dMonad :: GHC.Base.Monad
                                                                                       GHC.Types.IO
  Control.Monad.Trans.Except.$fMonadExceptT @ (Data.ConfigFile.Types.CPErrorData,
                                               GHC.Base.String)
                                            @ GHC.Types.IO
                                            $dApplicative
                                            $dMonad
  = Config.$s$fMonadErroreExceptT_$s$fMonadExceptT
"SPEC/Config $fMonadExceptT_$c>> @ (CPErrorData, String) @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                                  (Control.Monad.Trans.Except.ExceptT
                                                                                                     (Data.ConfigFile.Types.CPErrorData,
                                                                                                      GHC.Base.String)
                                                                                                     GHC.Types.IO)
                                                                               $dMonad :: GHC.Base.Monad
                                                                                            GHC.Types.IO
  Control.Monad.Trans.Except.$fMonadExceptT_$c>> @ (Data.ConfigFile.Types.CPErrorData,
                                                    GHC.Base.String)
                                                 @ GHC.Types.IO
                                                 $dApplicative
                                                 $dMonad
  = Config.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

